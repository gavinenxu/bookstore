module.exports = {
  // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  typeDefs:
    // Please don't change this file manually but run `prisma generate` to update it.
    // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

    /* GraphQL */ `
      type AggregateAuthor {
        count: Int!
      }

      type AggregateBook {
        count: Int!
      }

      type Author {
        id: ID!
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      type AuthorConnection {
        pageInfo: PageInfo!
        edges: [AuthorEdge]!
        aggregate: AggregateAuthor!
      }

      input AuthorCreateInput {
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      input AuthorCreateManyInput {
        create: [AuthorCreateInput!]
        connect: [AuthorWhereUniqueInput!]
      }

      type AuthorEdge {
        node: Author!
        cursor: String!
      }

      enum AuthorOrderByInput {
        id_ASC
        id_DESC
        role_ASC
        role_DESC
        firebrand_role_ASC
        firebrand_role_DESC
        short_bio_ASC
        short_bio_DESC
        firebrand_id_ASC
        firebrand_id_DESC
        display_name_ASC
        display_name_DESC
        first_name_ASC
        first_name_DESC
        last_name_ASC
        last_name_DESC
        slug_ASC
        slug_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type AuthorPreviousValues {
        id: ID!
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      input AuthorScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        role: Int
        role_not: Int
        role_in: [Int!]
        role_not_in: [Int!]
        role_lt: Int
        role_lte: Int
        role_gt: Int
        role_gte: Int
        firebrand_role: String
        firebrand_role_not: String
        firebrand_role_in: [String!]
        firebrand_role_not_in: [String!]
        firebrand_role_lt: String
        firebrand_role_lte: String
        firebrand_role_gt: String
        firebrand_role_gte: String
        firebrand_role_contains: String
        firebrand_role_not_contains: String
        firebrand_role_starts_with: String
        firebrand_role_not_starts_with: String
        firebrand_role_ends_with: String
        firebrand_role_not_ends_with: String
        short_bio: String
        short_bio_not: String
        short_bio_in: [String!]
        short_bio_not_in: [String!]
        short_bio_lt: String
        short_bio_lte: String
        short_bio_gt: String
        short_bio_gte: String
        short_bio_contains: String
        short_bio_not_contains: String
        short_bio_starts_with: String
        short_bio_not_starts_with: String
        short_bio_ends_with: String
        short_bio_not_ends_with: String
        firebrand_id: Int
        firebrand_id_not: Int
        firebrand_id_in: [Int!]
        firebrand_id_not_in: [Int!]
        firebrand_id_lt: Int
        firebrand_id_lte: Int
        firebrand_id_gt: Int
        firebrand_id_gte: Int
        display_name: String
        display_name_not: String
        display_name_in: [String!]
        display_name_not_in: [String!]
        display_name_lt: String
        display_name_lte: String
        display_name_gt: String
        display_name_gte: String
        display_name_contains: String
        display_name_not_contains: String
        display_name_starts_with: String
        display_name_not_starts_with: String
        display_name_ends_with: String
        display_name_not_ends_with: String
        first_name: String
        first_name_not: String
        first_name_in: [String!]
        first_name_not_in: [String!]
        first_name_lt: String
        first_name_lte: String
        first_name_gt: String
        first_name_gte: String
        first_name_contains: String
        first_name_not_contains: String
        first_name_starts_with: String
        first_name_not_starts_with: String
        first_name_ends_with: String
        first_name_not_ends_with: String
        last_name: String
        last_name_not: String
        last_name_in: [String!]
        last_name_not_in: [String!]
        last_name_lt: String
        last_name_lte: String
        last_name_gt: String
        last_name_gte: String
        last_name_contains: String
        last_name_not_contains: String
        last_name_starts_with: String
        last_name_not_starts_with: String
        last_name_ends_with: String
        last_name_not_ends_with: String
        slug: String
        slug_not: String
        slug_in: [String!]
        slug_not_in: [String!]
        slug_lt: String
        slug_lte: String
        slug_gt: String
        slug_gte: String
        slug_contains: String
        slug_not_contains: String
        slug_starts_with: String
        slug_not_starts_with: String
        slug_ends_with: String
        slug_not_ends_with: String
        AND: [AuthorScalarWhereInput!]
        OR: [AuthorScalarWhereInput!]
        NOT: [AuthorScalarWhereInput!]
      }

      type AuthorSubscriptionPayload {
        mutation: MutationType!
        node: Author
        updatedFields: [String!]
        previousValues: AuthorPreviousValues
      }

      input AuthorSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: AuthorWhereInput
        AND: [AuthorSubscriptionWhereInput!]
        OR: [AuthorSubscriptionWhereInput!]
        NOT: [AuthorSubscriptionWhereInput!]
      }

      input AuthorUpdateDataInput {
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      input AuthorUpdateInput {
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      input AuthorUpdateManyDataInput {
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      input AuthorUpdateManyInput {
        create: [AuthorCreateInput!]
        update: [AuthorUpdateWithWhereUniqueNestedInput!]
        upsert: [AuthorUpsertWithWhereUniqueNestedInput!]
        delete: [AuthorWhereUniqueInput!]
        connect: [AuthorWhereUniqueInput!]
        set: [AuthorWhereUniqueInput!]
        disconnect: [AuthorWhereUniqueInput!]
        deleteMany: [AuthorScalarWhereInput!]
        updateMany: [AuthorUpdateManyWithWhereNestedInput!]
      }

      input AuthorUpdateManyMutationInput {
        role: Int
        firebrand_role: String
        short_bio: String
        firebrand_id: Int
        display_name: String
        first_name: String
        last_name: String
        slug: String
      }

      input AuthorUpdateManyWithWhereNestedInput {
        where: AuthorScalarWhereInput!
        data: AuthorUpdateManyDataInput!
      }

      input AuthorUpdateWithWhereUniqueNestedInput {
        where: AuthorWhereUniqueInput!
        data: AuthorUpdateDataInput!
      }

      input AuthorUpsertWithWhereUniqueNestedInput {
        where: AuthorWhereUniqueInput!
        update: AuthorUpdateDataInput!
        create: AuthorCreateInput!
      }

      input AuthorWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        role: Int
        role_not: Int
        role_in: [Int!]
        role_not_in: [Int!]
        role_lt: Int
        role_lte: Int
        role_gt: Int
        role_gte: Int
        firebrand_role: String
        firebrand_role_not: String
        firebrand_role_in: [String!]
        firebrand_role_not_in: [String!]
        firebrand_role_lt: String
        firebrand_role_lte: String
        firebrand_role_gt: String
        firebrand_role_gte: String
        firebrand_role_contains: String
        firebrand_role_not_contains: String
        firebrand_role_starts_with: String
        firebrand_role_not_starts_with: String
        firebrand_role_ends_with: String
        firebrand_role_not_ends_with: String
        short_bio: String
        short_bio_not: String
        short_bio_in: [String!]
        short_bio_not_in: [String!]
        short_bio_lt: String
        short_bio_lte: String
        short_bio_gt: String
        short_bio_gte: String
        short_bio_contains: String
        short_bio_not_contains: String
        short_bio_starts_with: String
        short_bio_not_starts_with: String
        short_bio_ends_with: String
        short_bio_not_ends_with: String
        firebrand_id: Int
        firebrand_id_not: Int
        firebrand_id_in: [Int!]
        firebrand_id_not_in: [Int!]
        firebrand_id_lt: Int
        firebrand_id_lte: Int
        firebrand_id_gt: Int
        firebrand_id_gte: Int
        display_name: String
        display_name_not: String
        display_name_in: [String!]
        display_name_not_in: [String!]
        display_name_lt: String
        display_name_lte: String
        display_name_gt: String
        display_name_gte: String
        display_name_contains: String
        display_name_not_contains: String
        display_name_starts_with: String
        display_name_not_starts_with: String
        display_name_ends_with: String
        display_name_not_ends_with: String
        first_name: String
        first_name_not: String
        first_name_in: [String!]
        first_name_not_in: [String!]
        first_name_lt: String
        first_name_lte: String
        first_name_gt: String
        first_name_gte: String
        first_name_contains: String
        first_name_not_contains: String
        first_name_starts_with: String
        first_name_not_starts_with: String
        first_name_ends_with: String
        first_name_not_ends_with: String
        last_name: String
        last_name_not: String
        last_name_in: [String!]
        last_name_not_in: [String!]
        last_name_lt: String
        last_name_lte: String
        last_name_gt: String
        last_name_gte: String
        last_name_contains: String
        last_name_not_contains: String
        last_name_starts_with: String
        last_name_not_starts_with: String
        last_name_ends_with: String
        last_name_not_ends_with: String
        slug: String
        slug_not: String
        slug_in: [String!]
        slug_not_in: [String!]
        slug_lt: String
        slug_lte: String
        slug_gt: String
        slug_gte: String
        slug_contains: String
        slug_not_contains: String
        slug_starts_with: String
        slug_not_starts_with: String
        slug_ends_with: String
        slug_not_ends_with: String
        AND: [AuthorWhereInput!]
        OR: [AuthorWhereInput!]
        NOT: [AuthorWhereInput!]
      }

      input AuthorWhereUniqueInput {
        id: ID
      }

      type BatchPayload {
        count: Long!
      }

      type Book {
        id: ID!
        primary_isbn: String!
        title: String!
        authors(
          where: AuthorWhereInput
          orderBy: AuthorOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Author!]
        bookkey: String
        isbns: [String!]!
        price: String
        amazon_rank: Int
        publisher: String
        primary_bisacs: [String!]!
        description: String
        active: Boolean
        image: String
      }

      type BookConnection {
        pageInfo: PageInfo!
        edges: [BookEdge]!
        aggregate: AggregateBook!
      }

      input BookCreateInput {
        primary_isbn: String!
        title: String!
        authors: AuthorCreateManyInput
        bookkey: String
        isbns: BookCreateisbnsInput
        price: String
        amazon_rank: Int
        publisher: String
        primary_bisacs: BookCreateprimary_bisacsInput
        description: String
        active: Boolean
        image: String
      }

      input BookCreateisbnsInput {
        set: [String!]
      }

      input BookCreateprimary_bisacsInput {
        set: [String!]
      }

      type BookEdge {
        node: Book!
        cursor: String!
      }

      enum BookOrderByInput {
        id_ASC
        id_DESC
        primary_isbn_ASC
        primary_isbn_DESC
        title_ASC
        title_DESC
        bookkey_ASC
        bookkey_DESC
        price_ASC
        price_DESC
        amazon_rank_ASC
        amazon_rank_DESC
        publisher_ASC
        publisher_DESC
        description_ASC
        description_DESC
        active_ASC
        active_DESC
        image_ASC
        image_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type BookPreviousValues {
        id: ID!
        primary_isbn: String!
        title: String!
        bookkey: String
        isbns: [String!]!
        price: String
        amazon_rank: Int
        publisher: String
        primary_bisacs: [String!]!
        description: String
        active: Boolean
        image: String
      }

      type BookSubscriptionPayload {
        mutation: MutationType!
        node: Book
        updatedFields: [String!]
        previousValues: BookPreviousValues
      }

      input BookSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: BookWhereInput
        AND: [BookSubscriptionWhereInput!]
        OR: [BookSubscriptionWhereInput!]
        NOT: [BookSubscriptionWhereInput!]
      }

      input BookUpdateInput {
        primary_isbn: String
        title: String
        authors: AuthorUpdateManyInput
        bookkey: String
        isbns: BookUpdateisbnsInput
        price: String
        amazon_rank: Int
        publisher: String
        primary_bisacs: BookUpdateprimary_bisacsInput
        description: String
        active: Boolean
        image: String
      }

      input BookUpdateisbnsInput {
        set: [String!]
      }

      input BookUpdateManyMutationInput {
        primary_isbn: String
        title: String
        bookkey: String
        isbns: BookUpdateisbnsInput
        price: String
        amazon_rank: Int
        publisher: String
        primary_bisacs: BookUpdateprimary_bisacsInput
        description: String
        active: Boolean
        image: String
      }

      input BookUpdateprimary_bisacsInput {
        set: [String!]
      }

      input BookWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        primary_isbn: String
        primary_isbn_not: String
        primary_isbn_in: [String!]
        primary_isbn_not_in: [String!]
        primary_isbn_lt: String
        primary_isbn_lte: String
        primary_isbn_gt: String
        primary_isbn_gte: String
        primary_isbn_contains: String
        primary_isbn_not_contains: String
        primary_isbn_starts_with: String
        primary_isbn_not_starts_with: String
        primary_isbn_ends_with: String
        primary_isbn_not_ends_with: String
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        authors_every: AuthorWhereInput
        authors_some: AuthorWhereInput
        authors_none: AuthorWhereInput
        bookkey: String
        bookkey_not: String
        bookkey_in: [String!]
        bookkey_not_in: [String!]
        bookkey_lt: String
        bookkey_lte: String
        bookkey_gt: String
        bookkey_gte: String
        bookkey_contains: String
        bookkey_not_contains: String
        bookkey_starts_with: String
        bookkey_not_starts_with: String
        bookkey_ends_with: String
        bookkey_not_ends_with: String
        price: String
        price_not: String
        price_in: [String!]
        price_not_in: [String!]
        price_lt: String
        price_lte: String
        price_gt: String
        price_gte: String
        price_contains: String
        price_not_contains: String
        price_starts_with: String
        price_not_starts_with: String
        price_ends_with: String
        price_not_ends_with: String
        amazon_rank: Int
        amazon_rank_not: Int
        amazon_rank_in: [Int!]
        amazon_rank_not_in: [Int!]
        amazon_rank_lt: Int
        amazon_rank_lte: Int
        amazon_rank_gt: Int
        amazon_rank_gte: Int
        publisher: String
        publisher_not: String
        publisher_in: [String!]
        publisher_not_in: [String!]
        publisher_lt: String
        publisher_lte: String
        publisher_gt: String
        publisher_gte: String
        publisher_contains: String
        publisher_not_contains: String
        publisher_starts_with: String
        publisher_not_starts_with: String
        publisher_ends_with: String
        publisher_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        active: Boolean
        active_not: Boolean
        image: String
        image_not: String
        image_in: [String!]
        image_not_in: [String!]
        image_lt: String
        image_lte: String
        image_gt: String
        image_gte: String
        image_contains: String
        image_not_contains: String
        image_starts_with: String
        image_not_starts_with: String
        image_ends_with: String
        image_not_ends_with: String
        AND: [BookWhereInput!]
        OR: [BookWhereInput!]
        NOT: [BookWhereInput!]
      }

      input BookWhereUniqueInput {
        id: ID
      }

      scalar Long

      type Mutation {
        createAuthor(data: AuthorCreateInput!): Author!
        updateAuthor(
          data: AuthorUpdateInput!
          where: AuthorWhereUniqueInput!
        ): Author
        updateManyAuthors(
          data: AuthorUpdateManyMutationInput!
          where: AuthorWhereInput
        ): BatchPayload!
        upsertAuthor(
          where: AuthorWhereUniqueInput!
          create: AuthorCreateInput!
          update: AuthorUpdateInput!
        ): Author!
        deleteAuthor(where: AuthorWhereUniqueInput!): Author
        deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
        createBook(data: BookCreateInput!): Book!
        updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
        updateManyBooks(
          data: BookUpdateManyMutationInput!
          where: BookWhereInput
        ): BatchPayload!
        upsertBook(
          where: BookWhereUniqueInput!
          create: BookCreateInput!
          update: BookUpdateInput!
        ): Book!
        deleteBook(where: BookWhereUniqueInput!): Book
        deleteManyBooks(where: BookWhereInput): BatchPayload!
      }

      enum MutationType {
        CREATED
        UPDATED
        DELETED
      }

      interface Node {
        id: ID!
      }

      type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
      }

      type Query {
        author(where: AuthorWhereUniqueInput!): Author
        authors(
          where: AuthorWhereInput
          orderBy: AuthorOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Author]!
        authorsConnection(
          where: AuthorWhereInput
          orderBy: AuthorOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): AuthorConnection!
        book(where: BookWhereUniqueInput!): Book
        books(
          where: BookWhereInput
          orderBy: BookOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Book]!
        booksConnection(
          where: BookWhereInput
          orderBy: BookOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): BookConnection!
        node(id: ID!): Node
      }

      type Subscription {
        author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
        book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
      }
    `
};
